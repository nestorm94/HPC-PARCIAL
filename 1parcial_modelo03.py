# -*- coding: utf-8 -*-
"""1Parcial_Modelo03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r_zyZlYkTKl3PwTPWaHop7s1eRep8UNG

<div> 
<img src="https://res-5.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_256,w_256,f_auto,q_auto:eco/v1455514364/pim02bzqvgz0hibsra41.png" align="right"><br><br><FONT FACE="times new roman" SIZE=5>
<b></b>
<br>
<i><b>Docente:</b></i> Jhon Corredor Franco.
<br>
<i><b>Asignatura:</b></i> Métricas de rendimiento HPC
<br>
<i><b>Estudiante 1:</b></i> Juan Carlos Tarazona Contreras.
<br>
<i><b>Estudiante 2:</b></i> Nestor Morales.
<br>
<i><b>Tema:</b></i> Primer Parcial. Análisis exploratorio de datos.
<br>
<br>
10/09/2022
<br>
</FONT>
</div>

# Modelo **03**

### Descripción de Valores:

    Age: continuo.
    Bodymass: continuo.
    Height: continuo.
    Education: 11th, HS-grad, Assoc-acdm, Some-college, 10th, Prof-school, 7th-8th, 9th, 
               12th, Bachelors, Masters, Doctorate, 5th-6th, Assoc-voc, 1st-4th, Preschool.
    Martial_Status: Never-married, Married-civ-spouse, Widowed, Divorced,
                    Separated, Married-spouse-absent, Married-AF-spouse.
    Occupation: Machine-op-inspct, Farming-fishing, Protective-serv, Other-service, Sales, 
                Prof-specialty, Craft-repair, Adm-clerical, Exec-managerial, Armed-Forces,
                Tech-support,  Priv-house-serv, Transport-moving, Handlers-cleaners.
    Race: Black, White, Asian-Pac-Islander, Other, Amer-Indian-Eskimo.
    Sex: Male, Female.
    Hours_per_week: tiempo en horas.
    Country: United-States, Peru, Guatemala, Mexico, Dominican-Republic,
             Ireland, Germany, Philippines, Thailand, Haiti, El-Salvador,
             Puerto-Rico, Vietnam, South, Columbia, Japan, India, Laos, 
             Cambodia, Poland, England, Cuba, Taiwan, Italy, Portugal,
             Canada, China, Nicaragua, Honduras, Iran, Yugoslavi, Greece,
             Scotland, Jamaica, Ecuador,  Hungary, Hong, Trinadad&Tobago,
             Outlying-US(Guam-USVI-etc), France.
    Target: <=50K, >50K.

## 0.- Bibliotecas y Lectura
"""

# Se importan las bibliotecas necesarias
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from pandas.core.reshape.reshape import get_dummies
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_validate

import seaborn as sns

# Se importa el dataframe el dataset indiceMasaCorporal.csv
df = pd.read_csv("/content/indiceMasaCorporal.csv")

# Se muestra la información de dataset
df.head()

df.info()

"""**Se crea una copia de los datos del csv**

* se una division de la informacion con un tamano de 45, separandola en test y en train, se realiza el analisis sobre la participacion de test.
"""

train, test = train_test_split(df, test_size=0.45, random_state=45)
dt_prueba = test.copy()
cantidad = len(dt_prueba)
print('la catidad de datos del dataframe de pruebas',cantidad,'\n ')


print('Se evidencia la sumatoria de los siguientes de datos de null o NAN: \n',dt_prueba.isnull().sum())

"""## 1.- Limpieza de los datos ( NaN)
    - Bonus: ¿Cuantas Filas se han eliminado después de la limpieza?

**se realiza la ejecucion del funcion isnull().suma(), para identificar la 
cantidad de NaN o datos nulos que hay en la información suministrada**
"""

# Se procede a eliminar los valores desaparecidos
dt_prueba.dropna(inplace=True)
print('Se evidencia la sumatoria de los siguientes de datos de null o NAN: \n',dt_prueba.isnull().sum())
# Se obtiene información general from pandas.core.reshape.reshape import get_dummies de los dataframes
limpieza = len(dt_prueba)
Final = cantidad - limpieza
print(limpieza)

print('CONCULUSIONES')
print('*   Se evidencia que en la data inicial \n    se tenian una cantidad de', cantidad,' datos incuyendo los NaN.')
print('*   Despues de hacer la limpieza de datos NaN se evidencia que queda ',Final,'\n    datos limpios, significa que se borraron',limpieza,'del dataframe de test')
print('*   Se presentan datos del tipo *float64* y *object*, es decir, datos numéricos con decimales y categóricos')
print('*   Se presentó en el dt_prueba datos desaparecidos, se toma la decisión de eliminar los datos NaN')

"""**se actualizó la columna de 'Sex' y se le borra los espacios dentro de la informacion.**"""

dt_prueba['Sex']= dt_prueba['Sex'].str.replace(' ','')

"""* se realiza la eliminación de espacios en la columna 'Sex' para asi poder hacer mucho más fáciles la consulta, ya que estos espacios estaban generando errores en las consultas."""

# Se convierte en float los datos de la columna 'Age' para poder dejar al
dt_prueba['Age'] = dt_prueba['Age'].astype(float)
dt_prueba.info()

"""## 2.- Insertar columna que presente el Indice de Masa Corporal después de la columna 'height'
[Enlace BMI](https://www.calculator.net/bmi-calculator.html)

$BMI = kg/(m^2)$

<img src="./img/graff003.png">
"""

# Se hace revisión sobre los datos numéricos del df data
atributos_numericos = dt_prueba.select_dtypes(include=['float64'])
print(atributos_numericos)

"""*Se agrega a la data la columna de bmi con el indice de masa corporal al dataframe 
* se utiliza la formula de bmi para hacer dicho calculo

"""

#se convierte de centimetros a metros la columna de altura
dt_prueba[["Height"]] = dt_prueba[["Height"]]/100
#dt_prueba.drop(['% BMI'], axis=1, inplace=True)
dt_prueba.insert(loc = 3, 
          column = '% BMI', 
          value = (dt_prueba['Bodymass']/(dt_prueba['Height']*dt_prueba['Height'])))

# se muestra la informacion de años 'Age','Bodymass','Height','% BMI', para el resultado de lamasa corporal
dt_prueba[['Age','Bodymass','Height','% BMI']]

"""## 3.- ¿Cuantos hombres y mujeres presentan BMI normal?

    *------------------*------------*
    |   Categoría      |  Rango BMI |
    *------------------*------------*
    | Delgadez severa  |    < 16    |
    | Delgadez moderada|  16 - 17   |
    | Delgadez leve    |  17 - 18,5 |
    | Normal           |  18.5 - 25 |
    | Sobrepeso        |  25 - 30   |
    | Obesos Clase I   |  30 - 35   |
    | Obesos Clase II  |  35 - 40   |
    | Obesos Clase III |    > 40    |
    *------------------*------------*
"""

normal_mujeres = dt_prueba[(dt_prueba['% BMI'] >= 18.5) & (dt_prueba['% BMI']<=25)  & (dt_prueba['Sex']=='Female') ]['% BMI'].count()
normal_hombres = dt_prueba[(dt_prueba['% BMI'] >= 18.5) & (dt_prueba['% BMI']<=25)  & (dt_prueba['Sex']=='Male') ]['% BMI'].count()
print('las mujeres con Normal|18.5 - 25 son:',normal_mujeres,'los hombres con con Normal|18.5 - 25 son:',normal_hombres)

dt_prueba[(dt_prueba['% BMI'] >= 18.5) & (dt_prueba['% BMI']<=25)]['% BMI'].count()

"""* se evidencia que hay 3.164 personas entre hombre y mujeres, con un indice de mas corporal normal

## 4.-¿Cuantos hombres y mujeres presentan BMI obesos clase 3?
"""

clase3_mujeres = dt_prueba[(dt_prueba['% BMI'] >= 40) & (dt_prueba['Sex']=='Female')]['% BMI'].count()
clase3_hombres = dt_prueba[(dt_prueba['% BMI'] >= 40) & (dt_prueba['Sex']=='Male')]['% BMI'].count()

print('las mujeres con BMI Obesos Clase II |35 - 40 son:',clase3_mujeres,'los hombres con BMI Obesos Clase II |35 - 40 son:',clase3_hombres)

dt_prueba[dt_prueba['% BMI'] >= 40]['% BMI'].count()

"""* Se evidencia que hay 3279 personas que tienen un indice de masa corporal "obsesos clase III"

## 5.- ¿Cual es la edad promedio de las mujeres en el DataFrame?
"""

promedio_mujeres = dt_prueba[dt_prueba['Sex']=='Female']['Age'].mean()
print("La edad promedio de las mujeres:{",promedio_mujeres,"}" )

"""*La edad promedio de las mujeres esta entre los 37.1864

## 6.-  ¿Es verdad que las personas del DataFrame del pais ' United-States', en promedio se encuentran en 'Sobre Peso'?
      - Bonus -->  ¿En que categoria 'BMI' se encuentran en promedio por 'Sex' las personas del DataFrame?
    *------------------*------------*
    |   Categoría      |  Rango BMI |
    *------------------*------------*
    | Delgadez severa  |    < 16    |
    | Delgadez moderada|  16 - 17   |
    | Delgadez leve    |  17 - 18,5 |
    | Normal           |  18.5 - 25 |
    | Sobrepeso        |  25 - 30   |
    | Obesos Clase I   |  30 - 35   |
    | Obesos Clase II  |  35 - 40   |
    | Obesos Clase III |    > 40    |
    *------------------*------------*
"""

prd_US = dt_prueba[dt_prueba['Country']==' United-States']['% BMI'].mean()
prod_Male = dt_prueba[dt_prueba['Sex']=='Male']['% BMI'].mean()
prod_famale = dt_prueba[dt_prueba['Sex']=='Female']['% BMI'].mean()
print("Las personas de 'United-States', en promedio se encuentran:{",prd_US,"}, para los hombres en promedio se encuentran:{",prod_Male,"},para las mujeres en promedio se encuentran:",prod_famale)

"""1.   Las personas de 'United-States', en promedio se encuentran en un
indice de masa corporal de 31.666, que equivale a estar una categoria de Obesos Clase I
2.   Para los hombres en promedio se encuentran en un indici de masa corporal con un indece de 31.5643, segun este dato se encuentran en un idice nivel 'Clase obeso I'
3. Para los mujeres en promedio se encuentran en un indice de masa corporal con un indece de 31.5643, segun este dato se encuentran en un idice nivel 'Clase obeso I'

## 7.-  ¿Cuál es el promedio de la masa corporal del país ‘Colombia’?
"""

prd_COL = dt_prueba[dt_prueba['Country']==' Columbia']['Bodymass'].mean()
print("Las personas de Colombia tienen un promedio de masa corporal de", prd_COL)

"""*   Las personas de Colombia tienen un promedio de masa corporal de 82.72576923076923

## 8.- ¿Cuál es la categoría BMI que presenta el país ‘Colombia’ en promedio?
      
    *------------------*------------*
    |   Categoría      |  Rango BMI |
    *------------------*------------*
    | Delgadez severa  |    < 16    |
    | Delgadez moderada|  16 - 17   |
    | Delgadez leve    |  17 - 18,5 |
    | Normal           |  18.5 - 25 |
    | Sobrepeso        |  25 - 30   |
    | Obesos Clase I   |  30 - 35   |
    | Obesos Clase II  |  35 - 40   |
    | Obesos Clase III |    > 40    |
    *------------------*------------*
"""

prd_COL = dt_prueba[dt_prueba['Country']==' Columbia']['% BMI'].mean()
print("Las personas de Colombia tienen un promedio de % BMI corporal de", prd_COL)

"""Según la anterior tabla con el promedio de masa corporal de 34.33, se deduce que la categoría que representa el BMI de Colombia es "Obesos Clase I"

## 9.- Calcule el promedio y la desviación estandar de la edad, en las siguentes categorias ['BMI']:
        - La edad promedio y su desviación de categoría Delgadez Severa: {mean} +- {std} años.
        - La edad promedio y su desviación de categoría Obesos Clase II: {mean} +- {std} años.
        - La edad promedio y su desviación de categoría Obesos Clase III: {mean} +- {std} años.
"""

# - La edad promedio y su desviación de categoría Delgadez Severa: {mean} +- {std} años.

edad_promedio_Delgadez = dt_prueba[dt_prueba['% BMI'] < 16]['Age'].mean()
desviacion_estandar_Delgadez = dt_prueba[dt_prueba['% BMI'] < 16]['Age'].std()
print("la edad promedio es:",edad_promedio_Delgadez,"la desvicion estandar es:",desviacion_estandar_Delgadez,"de categoría Delgadez Severa")
print("\n --------------------------------------------------------------------------------------------------------------------")
plt.hist(dt_prueba['Age'])
plt.axvline(edad_promedio_Delgadez,color='red')
plt.axvline(desviacion_estandar_Delgadez,color='blue')

# - La edad promedio y su desviación de categoría Obesos Clase II: {mean} +- {std} años.
edad_promedio_Clase_II = dt_prueba[(dt_prueba['% BMI'] >= 35) & (dt_prueba['% BMI']<=40)]['Age'].mean()
desviacion_estandar_Clase_II = dt_prueba[(dt_prueba['% BMI'] >= 35) & (dt_prueba['% BMI']<=40)]['Age'].std()
print("la edad promedio es:",edad_promedio_Clase_II,"la desvicion estandar es:",desviacion_estandar_Clase_II,"de categoría obesidad clase II")
print("\n --------------------------------------------------------------------------------------------------------------------")
plt.hist(dt_prueba['Age'])
plt.axvline(edad_promedio_Clase_II,color='red')
plt.axvline(desviacion_estandar_Clase_II,color='blue')

# - La edad promedio y su desviación de categoría Obesos Clase III: {mean} +- {std} años.

edad_promedio_Clase_III = dt_prueba[dt_prueba['% BMI'] > 40]['Age'].mean()
desviacion_estandar_Clase_III = dt_prueba[dt_prueba['% BMI'] > 40]['Age'].std()
print("la edad promedio es:",edad_promedio_Clase_III,"la desvicion estandar es:",desviacion_estandar_Clase_III,"de categoría obesidad clase III")
print("\n --------------------------------------------------------------------------------------------------------------------")
plt.hist(dt_prueba['Age'])
plt.axvline(edad_promedio_Clase_III,color='red')
plt.axvline(desviacion_estandar_Clase_III,color='blue')

"""## 10.- De las personas de más edad en el Dataframe:
    - ¿Cuantas mujeres aparecen, que grado de educación y que estado civil tienen? 
    - ¿Es cierto que son todas del pais 'United-States'?

**Edad promedio de toda la data_prueba**
"""

dt_prueba['Age'].mean()

"""**10.1.- ¿Cuántas mujeres aparecen, que grado de educación y que estado civil tienen?**"""

# se muestra las edades mayores al promedio de la edad
cantidad_mayores = dt_prueba[(dt_prueba['Age'] > 38) & (dt_prueba['Sex']=='Female')]['Sex'].count()
print('la cantidad de gente mayor a la edad media es :\n',cantidad_mayores)
ocupacion = pd.unique(dt_prueba[(dt_prueba['Age'] > 38) & (dt_prueba['Sex']=='Female')]['Occupation'])
estado_civil = pd.unique(dt_prueba[(dt_prueba['Age'] >= 38) & (dt_prueba['Sex']=='Female')]['Martial_Status'])
country = pd.unique(dt_prueba[(dt_prueba['Age'] > 38) & (dt_prueba['Sex']=='Female')]['Country'])
print('--------------------------------------------------------------------')
print('Las Ocupaciones son: ',ocupacion)
print('--------------------------------------------------------------------')
print('El estado civil son: ',estado_civil)
print('--------------------------------------------------------------------')
print('Las ciudades son: ',country)
print('--------------------------------------------------------------------')

"""  * Se encuentran '2047' mujeres mayores de la media de los 'Age' """

cantidad_60 = dt_prueba[(dt_prueba['Age'] > 60) & (dt_prueba['Sex']=='Female')]['Sex'].count()
print('la catidad de gente mayores de la edad de 60 es :',cantidad_60)
Ocupacion = pd.unique(dt_prueba[(dt_prueba['Age'] >= 60) & (dt_prueba['Sex']=='Female')]['Occupation'])
estado_civil = pd.unique(dt_prueba[(dt_prueba['Age'] >= 60) & (dt_prueba['Sex']=='Female')]['Martial_Status'])
ciudad = pd.unique(dt_prueba[(dt_prueba['Age'] >= 60) & (dt_prueba['Sex']=='Female') & (dt_prueba['Country']!= '')]['Country'])

print('--------------------------------------------------------------------')
print('Las Ocupaciones son: ',Ocupacion)
print('--------------------------------------------------------------------')
print('El estado civil son: ',estado_civil)
print('--------------------------------------------------------------------')
print('Las ciudades son: ',country)
print('--------------------------------------------------------------------')

"""* Se encuentran '388' mujeres mayores de 60 años 
  la catidad de gente mayores de la edad de 60 es : 345
  * se evidencia en los dos casos que no todas las mujeres son de ' United-States'

## 11.- Grafique la Edad por Ocupación (por Genero)
    --> BONUS: Mencione al menos 3 (tres) observaciones obtenidas de la gráfica
"""

dt_prueba.info()

ax = sns.barplot(data=dt_prueba,x=dt_prueba['Occupation'],y=dt_prueba['Age'], hue=dt_prueba['Sex'])
ax.figure.set_size_inches(25,4)
ax.set_title('Edad')
ax.set_xlabel('Ocupacion')
ax.set_ylabel('total de edades')
plt.grid()

#df.groupby(["Occupation"]).hist()
# Se hace revisión sobre los datos categóricos del df test
atributos_categoricos_test = dt_prueba.select_dtypes(include=['object'])
print(atributos_categoricos_test.columns)

"""## 12.-  Describa al menos 5 conclusiones sobre la gráfica del punto 11.

* según la tabla se puede evidenciar que en la mayoría de ocupaciones hay más hombres que mujeres, siendo esto en 8 ocupaciones en las 14 totales.
* Se nota que tanto en hombres como en mujeres, el límite de edad de trabajadores esta en el rango de 30 a 40 años.
* Se observa que en la ocupación 'Armed-Forces' o fuerzas armadas solo hay hombres.
* Los hombres pertenecientes a las fuerzas armadas son los trabajadores de menor edad.
* Las mujeres pertenecientes a 'Priv-house-serv' o servicio de privado de casas son, tanto en hombres como en mujeres, los trabajadores con mayor edad.

## 13 - ¿Es cierto que las personas que reciben más de 50k ['Target'] tienen al menos educación secundaria?
"""

# personas que reciven mas de 50k 
cantidad_mayores = dt_prueba[(dt_prueba['Target']==' >50K.')]['Education'].count()
print('la cantidad de personas que reciben mas de 50k es :\n',cantidad_mayores)
education = pd.unique(dt_prueba[(dt_prueba['Target']==' >50K.')]['Education'])
print('--------------------------------------------------------------------')
print('Las Educacion de las personas que reciven mas de  50k son: ',education)
print('--------------------------------------------------------------------')

"""* segun lo estudiado en la consulta se evidencia que es falso ya que en las personas que tienen un 'Target' mas de 50k, alugnos de ellos tienen educacion de: '5th-6th',' 7th-8th',' 11th',' 10th',' 9th',' 12th' '

## 14.- ¿Cuál es el promedio, desviación, el valor máximo y mínimo en el dataset?
"""

dt_prueba.describe()

"""## 15.- ¿Cuál es la proporción Doctorate del país Colombia en el dataset? """

num_doc = dt_prueba[(dt_prueba['Education'] == ' Doctorate') &(dt_prueba['Country']== ' Columbia')]['Education'].count()
porcentaje=(num_doc)/len(dt_prueba)*100
print(porcentaje)

pais = pd.unique(df[(df['Education'] == ' Doctorate')]['Country'])

#dt_prueba[(dt_prueba['Education'] == ' Doctorate') &(dt_prueba['Country']== ' Columbia')].count()

"""## 16.- ¿Cuál es la proporción Doctorate del país US en el dataset?


"""

num_doc = dt_prueba[(dt_prueba['Education'] == ' Doctorate') &(dt_prueba['Country']== ' United-States')]['Education'].count()
porcentaje=(num_doc)/len(dt_prueba)*100

print(porcentaje)